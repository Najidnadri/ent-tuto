package gqlFilter

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"gqlFilter/ent"
	"gqlFilter/ent/user"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return ent.FromContext(ctx).User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	return ent.FromContext(ctx).User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*ent.User, error) {
	return nil, r.client.User.DeleteOneID(id).Exec(ctx)
}

// IsGmail is the resolver for the isGmail field.
func (r *userWhereInputResolver) IsGmail(ctx context.Context, obj *ent.UserWhereInput, data *bool) error {
	if obj == nil || data == nil {
		return nil
	}
	if *data {
		obj.AddPredicates(user.EmailContains("@gmail.com"))
	} else {
		obj.AddPredicates(user.Not(user.EmailContains("@gmail.com")))
	}
	return nil
}

// IsOutlook is the resolver for the isOutlook field.
func (r *userWhereInputResolver) IsOutlook(ctx context.Context, obj *ent.UserWhereInput, data *bool) error {
	if obj == nil || data == nil {
		return nil
	}
	if *data {
		obj.AddPredicates(user.EmailContains("@outlook.com"))
	} else {
		obj.AddPredicates(user.Not(user.EmailContains("@outlook.com")))
	}
	return nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
