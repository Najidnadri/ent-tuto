// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCarInput represents a mutation input for creating cars.
type CreateCarInput struct {
	Model       string
	PlateNumber string
	CreatedAt   *time.Time
	OwnerID     *int
}

// Mutate applies the CreateCarInput on the CarMutation builder.
func (i *CreateCarInput) Mutate(m *CarMutation) {
	m.SetModel(i.Model)
	m.SetPlateNumber(i.PlateNumber)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateCarInput on the CarCreate builder.
func (c *CarCreate) SetInput(i CreateCarInput) *CarCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarInput represents a mutation input for updating cars.
type UpdateCarInput struct {
	Model       *string
	PlateNumber *string
	ClearOwner  bool
	OwnerID     *int
}

// Mutate applies the UpdateCarInput on the CarMutation builder.
func (i *UpdateCarInput) Mutate(m *CarMutation) {
	if v := i.Model; v != nil {
		m.SetModel(*v)
	}
	if v := i.PlateNumber; v != nil {
		m.SetPlateNumber(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdate builder.
func (c *CarUpdate) SetInput(i UpdateCarInput) *CarUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdateOne builder.
func (c *CarUpdateOne) SetInput(i UpdateCarInput) *CarUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name      string
	Email     string
	CreatedAt *time.Time
	CarIDs    []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name         *string
	Email        *string
	ClearCars    bool
	AddCarIDs    []int
	RemoveCarIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearCars {
		m.ClearCars()
	}
	if v := i.AddCarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.RemoveCarIDs; len(v) > 0 {
		m.RemoveCarIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
