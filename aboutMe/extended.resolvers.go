package aboutMe

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"aboutMe/ent"
	"context"
)

// CreateHobbies is the resolver for the createHobbies field.
func (r *createUserInputResolver) CreateHobbies(ctx context.Context, obj *ent.CreateUserInput, data []*ent.CreateHobbyInput) error {
	// NOTE: We need to use the Ent client from the context.
	// To ensure we create all of the children in the same transaction.
	// See: Transactional Mutations for more information.
	c := ent.FromContext(ctx)
	builders := make([]*ent.HobbyCreate, len(data))
	for i := range data {
		builders[i] = c.Hobby.Create().SetInput(*data[i])
	}
	todos, err := c.Hobby.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]int, len(todos))
	for i := range todos {
		ids[i] = todos[i].ID
	}
	obj.HobbyIDs = append(obj.HobbyIDs, ids...)
	return nil
}

// CreateFriends is the resolver for the createFriends field.
func (r *createUserInputResolver) CreateFriends(ctx context.Context, obj *ent.CreateUserInput, data []*ent.CreateUserInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.UserCreate, len(data))
	for i := range data {
		builders[i] = c.User.Create().SetInput(*data[i])
	}
	todos, err := c.User.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]int, len(todos))
	for i := range todos {
		ids[i] = todos[i].ID
	}
	obj.FriendIDs = append(obj.FriendIDs, ids...)
	return nil
}
