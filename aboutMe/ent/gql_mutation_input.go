// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateHobbyInput represents a mutation input for creating hobbies.
type CreateHobbyInput struct {
	Name     string
	OwnerIDs []int
}

// Mutate applies the CreateHobbyInput on the HobbyMutation builder.
func (i *CreateHobbyInput) Mutate(m *HobbyMutation) {
	m.SetName(i.Name)
	if v := i.OwnerIDs; len(v) > 0 {
		m.AddOwnerIDs(v...)
	}
}

// SetInput applies the change-set in the CreateHobbyInput on the HobbyCreate builder.
func (c *HobbyCreate) SetInput(i CreateHobbyInput) *HobbyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHobbyInput represents a mutation input for updating hobbies.
type UpdateHobbyInput struct {
	Name           *string
	ClearOwners    bool
	AddOwnerIDs    []int
	RemoveOwnerIDs []int
}

// Mutate applies the UpdateHobbyInput on the HobbyMutation builder.
func (i *UpdateHobbyInput) Mutate(m *HobbyMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearOwners {
		m.ClearOwners()
	}
	if v := i.AddOwnerIDs; len(v) > 0 {
		m.AddOwnerIDs(v...)
	}
	if v := i.RemoveOwnerIDs; len(v) > 0 {
		m.RemoveOwnerIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateHobbyInput on the HobbyUpdate builder.
func (c *HobbyUpdate) SetInput(i UpdateHobbyInput) *HobbyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHobbyInput on the HobbyUpdateOne builder.
func (c *HobbyUpdateOne) SetInput(i UpdateHobbyInput) *HobbyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name      string
	Email     string
	CreatedAt *time.Time
	FriendIDs []int
	HobbyIDs  []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.FriendIDs; len(v) > 0 {
		m.AddFriendIDs(v...)
	}
	if v := i.HobbyIDs; len(v) > 0 {
		m.AddHobbyIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name            *string
	Email           *string
	ClearFriends    bool
	AddFriendIDs    []int
	RemoveFriendIDs []int
	ClearHobbies    bool
	AddHobbyIDs     []int
	RemoveHobbyIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearFriends {
		m.ClearFriends()
	}
	if v := i.AddFriendIDs; len(v) > 0 {
		m.AddFriendIDs(v...)
	}
	if v := i.RemoveFriendIDs; len(v) > 0 {
		m.RemoveFriendIDs(v...)
	}
	if i.ClearHobbies {
		m.ClearHobbies()
	}
	if v := i.AddHobbyIDs; len(v) > 0 {
		m.AddHobbyIDs(v...)
	}
	if v := i.RemoveHobbyIDs; len(v) > 0 {
		m.RemoveHobbyIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
