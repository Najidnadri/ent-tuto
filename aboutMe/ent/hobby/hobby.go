// Code generated by ent, DO NOT EDIT.

package hobby

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hobby type in the database.
	Label = "hobby"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeOwners holds the string denoting the owners edge name in mutations.
	EdgeOwners = "owners"
	// Table holds the table name of the hobby in the database.
	Table = "hobbies"
	// OwnersTable is the table that holds the owners relation/edge. The primary key declared below.
	OwnersTable = "user_hobbies"
	// OwnersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnersInverseTable = "users"
)

// Columns holds all SQL columns for hobby fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// OwnersPrimaryKey and OwnersColumn2 are the table columns denoting the
	// primary key for the owners relation (M2M).
	OwnersPrimaryKey = []string{"user_id", "hobby_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Hobby queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOwnersCount orders the results by owners count.
func ByOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnersStep(), opts...)
	}
}

// ByOwners orders the results by owners terms.
func ByOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
	)
}
